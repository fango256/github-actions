# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ] # Pull requests targeting this branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION : eu-west-2 # AWS London region

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache composer modules
        uses: actions/cache@v3
        env:
          cache-name: test-cache
        with:
          path: |
            /home/runner/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
      - name: Install PHP Packages
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache node and composer modules
        uses: actions/cache@v3
        env:
          cache-name: cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          # compose cache is stored in the home directory (found by running 'composer config --global --list')
          path: |
            ~/.npm
            /home/runner/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/composer.lock') }}
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
      - name: Install PHP Packages
        # No dev packages
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-reqs --no-dev
      - name: Install FE Packages
        run: npm ci
      - name: Build FE Packages
        run: npm run build
      - name: Upload the artifacts
        uses: actions/upload-artifact@v2
        with:
          name: output-artifact
          path: ./routes
          retention-days: 1

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build]
    environment:
      name: Staging
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::929105575477:role/GitHubAction-ElasticBeanstalk
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
      - name: Retrieve saved artifact
        uses: actions/download-artifact@v2
        with:
          name: output-artifact
          path: ./routes

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: Production
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::929105575477:role/GitHubAction-ElasticBeanstalk
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
      - name: Retrieve saved artifact
        uses: actions/download-artifact@v2
        with:
          name: output-artifact
          path: ./routes
